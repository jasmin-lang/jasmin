#[sct="{ ptr: transient, val : { n: d, s: secret } } -> d"]
export
fn load(reg ptr u32[1] a) -> reg u32 {
  _ = #init_msf();
  reg u32 r;
  r = a[0];
  return r;
}

#[sct="{n: a, s: secret} Ã— {n: b, s: secret} â†’ c"
, constraints="a <= c, b <= c"]
export fn sum(
  #poly=x reg u32 x,
  #poly=y reg u32 y)
-> #poly={x, y} reg u32 {
  _ = #init_msf();
  reg u32 r;
  r = x;
  r += y;
  return r;
}
