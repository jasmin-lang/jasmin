fn add(reg u64 x, reg u64 ya) -> reg u64 {

 reg u64 t;

 t = x + ya;

 return t;
}

#[ct=" _ * public -> _"]
fn add_L(reg u64 x, reg u64 ya) -> reg u64 {

 reg u64 t;

 t = x + ya;

 return t;
}

#[ct=" _ * secret -> _ "]
fn add_H(reg u64 x, reg u64 ya) -> reg u64 {

 reg u64 t;

 t = x + ya;

 return t;
}

#[ct="l1 Ã— l2 -> {l1, l2}"]
fn add_P(reg u64 x, reg u64 ya) -> reg u64 {

 reg u64 t;

 t = x + ya;

 return t;
}

#[ct="l1 Ã— l1 -> l1"]
fn add_S(reg u64 x, reg u64 ya) -> reg u64 {

 reg u64 t;

 t = x + ya;

 return t;
}
