export
fn biv(reg u32 arg0, reg u32 arg1) -> reg u32 {
    reg u32 x;
    x = #BIC(arg0, arg1);

    // Immediates.
    x = #BIC(x, 1);
    x = #BIC(x, -1);

    // Shifts.
    x = #BIC(x, arg0, #LSL(0));
    x = #BIC(x, arg0, #LSL(31));
    x = #BIC(x, arg0, #LSR(1));
    x = #BIC(x, arg0, #LSR(32));
    x = #BIC(x, arg0, #ASR(1));
    x = #BIC(x, arg0, #ASR(32));
    x = #BIC(x, arg0, #ROR(1));
    x = #BIC(x, arg0, #ROR(31));
    //x = #BIC(x, arg0, #RRX(1));

    // Set flags.
    reg bool n, z, c, v;
    n, z, c, x = #BICS(x, arg0);
    n, z, c, x = #BICS(x, 1);
    n, z, c, x = #BICS(x, arg0, #LSL(3));
    n, z, c, v, _ = #MOVS(x); // BIC does not set V.

    // Conditions.
    x = #BICcc(x, arg0, z, x);            // EQ
    x = #BICcc(x, arg0, !z, x);           // NE
    x = #BICcc(x, arg0, c, x);            // CS
    x = #BICcc(x, arg0, !c, x);           // CC
    x = #BICcc(x, arg0, n, x);            // MI
    x = #BICcc(x, arg0, !n, x);           // PL
    x = #BICcc(x, arg0, v, x);            // VS
    x = #BICcc(x, arg0, !v, x);           // VC
    x = #BICcc(x, arg0, c && !z, x);      // HI
    x = #BICcc(x, arg0, !c || z, x);      // LS
    x = #BICcc(x, arg0, n == v, x);       // GE
    x = #BICcc(x, arg0, n != v, x);       // LT
    x = #BICcc(x, arg0, !z && n == v, x); // GT
    x = #BICcc(x, arg0, z || n != v, x);  // LE

    x = #BICcc(x, 1, !!!!z, x);
    n, z, c, x = #BICScc(x, arg0, n == v, n, z, c, x);
    n, z, c, x = #BICScc(x, 2, !c || z, n, z, c, x);
    x = #BICcc(x, arg0, #LSL(3), z, x);
    n, z, c, x = #BICScc(x, arg0, #LSL(3), z, n, z, c, x);

    reg u32 res;
    res = x;
    return res;
}
