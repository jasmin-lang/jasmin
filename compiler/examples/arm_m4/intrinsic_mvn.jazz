export
fn mvn(reg u32 arg0) -> reg u32 {
    reg u32 x;
    x = #MVN(arg0);

    // Immediates.
    x = #MVN(1);
    x = #MVN(-1);

    // Shifts.
    x = #MVN(x, #LSL(0));
    x = #MVN(x, #LSL(31));
    x = #MVN(x, #LSR(1));
    x = #MVN(x, #LSR(32));
    x = #MVN(x, #ASR(1));
    x = #MVN(x, #ASR(32));
    x = #MVN(x, #ROR(1));
    x = #MVN(x, #ROR(31));
    //x = #MVN(x, #RRX(1));

    // Set flags.
    reg bool n, z, c, v;
    n, z, c, x = #MVNS(x);
    n, z, c, x = #MVNS(1);
    n, z, c, x = #MVNS(x, #LSL(3));
    n, z, c, v, _ = #MOVS(x); // MVN does not set V.

    // Conditions.
    x = #MVNcc(x, z, x);            // EQ
    x = #MVNcc(x, !z, x);           // NE
    x = #MVNcc(x, c, x);            // CS
    x = #MVNcc(x, !c, x);           // CC
    x = #MVNcc(x, n, x);            // MI
    x = #MVNcc(x, !n, x);           // PL
    x = #MVNcc(x, v, x);            // VS
    x = #MVNcc(x, !v, x);           // VC
    x = #MVNcc(x, c && !z, x);      // HI
    x = #MVNcc(x, !c || z, x);      // LS
    x = #MVNcc(x, n == v, x);       // GE
    x = #MVNcc(x, n != v, x);       // LT
    x = #MVNcc(x, !z && n == v, x); // GT
    x = #MVNcc(x, z || n != v, x);  // LE

    x = #MVNcc(x, !!!!z, x);
    n, z, c, x = #MVNScc(x, n == v, n, z, c, x);
    n, z, c, x = #MVNScc(2, !c || z, n, z, c, x);
    x = #MVNcc(x, #LSL(3), z, x);
    n, z, c, x = #MVNScc(x, #LSL(3), z, n, z, c, x);

    reg u32 res;
    res = x;
    return res;
}

