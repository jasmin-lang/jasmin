inline
fn use(stack u32[17] t) -> reg u32 {
  inline int i;
  reg u32 s;
  s = 0;
  for i = 0 to 17 {
    s += t[i];
  }
  return s;
}

export
fn copy(reg u64 in, reg u64 inlen) -> reg u32 {

reg bool eq le;
stack u32[17] t;
reg u8 size;
reg u32 one, r, tmp;
inline int i;

one = 1;
while (inlen >s 0) {
size = inlen;
size &= 0xF;

for i = 0 to 17 {
tmp = #set0_32();
?{ "==" = eq, "<=s" = le } = #CMP_8(size, i);
tmp = (u32)[in + i] if !le; // size > i
tmp = one if eq; // size == i
t[i] = tmp;
}

in += 16;
inlen -= 16;

}

r = use(t);

return r;

}
