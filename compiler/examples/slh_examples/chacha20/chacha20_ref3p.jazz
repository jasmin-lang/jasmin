param int CHACHA_ROUNDS=20;


// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_ref3p( reg u64 nonce key) -> stack u32[16]
{
  inline int i;
  stack u32[16] st;
  reg u32 t;

  st[0] = 0x61707865;
  st[1] = 0x3320646e;
  st[2] = 0x79622d32;
  st[3] = 0x6b206574;

  // reads 8 u32 from pointer key
  for i=0 to 8
  { t = (u32)[key + 4*i];
    st[4+i] = t; }

  // 64-bit counter (same as st[12] = 0; st[13] = 0;)
  st[u64 6] = 0;

  // reads 2 u32 from pointer nonce
  for i=0 to 2
  { t = (u32)[nonce + 4*i];
    st[14+i] = t; }

  return st;
}

// increments 64-bit counter
inline fn __increment_counter_ref3p(stack u32[16] st) -> stack u32[16]
{
  reg u64 t;

  t = st[u64 6];
  t += 1;
  st[u64 6] = t;

  return st;
}


///////////////////////////////////////////////////////////////////////////////
// store 'xor' ////////////////////////////////////////////////////////////////

inline fn __update_ptr_xor_ref3p( reg u64 output plain len,  inline int n) ->  reg u64,  reg u64,  reg u64
{
  output += n;
  plain += n;
  len -= n;
  return output, plain, len;
}

// 64 bytes
inline fn __store_xor_ref3p( regx u64 s_output s_plain s_len,  reg u32[16] k,  stack u32 k15) ->  regx u64,  regx u64,  regx u64
{
  inline int i;
   reg u64[8] kk;
   reg u32 t;
   reg u64 output plain len;
   reg u64 aux;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  plain = #MOVX(s_plain);
  kk[0] ^= (u64)[plain + 8*0];

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= (u64)[plain + 8*1];
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
    kk[i] = (64u)((i == 7) ? k15 : k[2*i+1]);

    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= (u64)[plain + 8*i];
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, plain, len = __update_ptr_xor_ref3p(output, plain, len, 64);

  s_output = #MOVX(output);
  s_plain = #MOVX(plain);
  s_len = #MOVX(len);

  return s_output, s_plain, s_len;
}

inline fn __sum_states_store_xor_ref3p(
   regx u64 s_output s_plain s_len,
   reg u32[16] k,
   stack u32 k15,
   stack u32[16] st
) ->  regx u64,  regx u64,  regx u64
{
  inline int i;
   reg u64[8] kk;
   reg u64 output plain len;
  reg u64 aux;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  plain = #MOVX(s_plain);
  kk[0] ^= (u64)[plain + 8*0];

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= (u64)[plain + 8*1];
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  k[2*i+1] = k15 if (2*i+1 == 15);
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= (u64)[plain + 8*i];
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, plain, len = __update_ptr_xor_ref3p(output, plain, len, 64);

  s_output = #MOVX(output);
  s_plain = #MOVX(plain);
  s_len = #MOVX(len);

  return s_output, s_plain, s_len;
}

inline fn __store_xor_last_ref3p( regx u64 s_output s_plain s_len,  reg u32[16] k,  stack u32 k15)
{
  inline int i;
   reg u64 output plain len len8 j;
  reg u64 t;

  reg u32 u;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = k15;
  s_k[15] = u;

  output = #MOVX(s_output);
  plain = #MOVX(s_plain);
  len = #MOVX(s_len);

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = (u64)[plain + 8*j];
    t ^= s_k[u64 (int)j];
    (u64)[output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  {
    pi = (u8)[plain + j];
    pi ^= s_k[u8 (int)j];
    (u8)[output + j] = pi;
    j += 1;
  }
}


///////////////////////////////////////////////////////////////////////////////
// store //////////////////////////////////////////////////////////////////////

inline fn __update_ptr_ref3p( reg u64 output len,  inline int n) ->  reg u64,  reg u64
{
  output += n;
  len -= n;
  return output, len;
}

// 64 bytes
inline fn __store_ref3p( regx u64 s_output s_len,  reg u32[16] k,  stack u32 k15) ->  regx u64,  regx u64
{
  inline int i;
   reg u64[8] kk;
   reg u64 output len;
   reg u64 aux;
   reg u32 t;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
    kk[i] = (64u)((i == 7) ? k15 : k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, len = __update_ptr_ref3p(output, len, 64);

  s_output = #MOVX(output);
  s_len = #MOVX(len);

  return s_output, s_len;
}

inline fn __sum_states_store_ref3p(
   regx u64 s_output s_len,
   reg u32[16] k,
   stack u32 k15,
   stack u32[16] st
) ->  regx u64,  regx u64
{
  inline int i;
   reg u64[8] kk;
   reg u64 output len;
   reg u64 aux;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = #MOVX(s_output);
  (u64)[output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  k[2*i+1] = k15 if (2*i+1 == 15);
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    (u64)[output + 8*(i-1)] = kk[i-1];
  }

  (u64)[output + 8*7] = kk[7];

  len = #MOVX(s_len);

  output, len = __update_ptr_ref3p(output, len, 64);

  s_output = #MOVX(output);
  s_len = #MOVX(len);

  return s_output, s_len;
}

inline fn __store_last_ref3p( regx u64 s_output s_len,  reg u32[16] k,  stack u32 k15)
{
  inline int i;
   reg u64 j output len len8;
   reg u64 t;
   reg u32 u;
   stack u32[16] s_k;
   reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = k15;
  s_k[15] = u;

  output = #MOVX(s_output);
  len = #MOVX(s_len);

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = s_k[u64 (int)j];
    (u64)[output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  {
    pi = s_k[u8 (int)j];
    (u8)[output + j] = pi;
    j += 1;
  }
}


// the following implementation requires:
// - (even) param int CHACHA_ROUNDS;
// - inline fn __init_ref3p(reg u64 nonce key) -> stack u32[16] (check chacha_state.jinc)
// - inline fn __increment_counter_ref3p(stack u32[16] state) -> stack u32[16] (check chacha_state.jinc)

// used;
inline fn __copy_state_ref3p(stack u32[16] st) -> reg u32[16], stack u32
{
  inline int i;
  reg u32 k15;
  reg u32[16] k;
  stack u32 s_k15;

  k15 = st[15];
  s_k15 = k15;

  for i=0 to 15
  { k[i] = st[i]; }

  return k, s_k15;
}


// used; performs two quarter rounds, inlined 'line's;
inline fn __half_round_inline_ref3p(
  reg u32[16] k,
  inline int a0 b0 c0 d0
             a1 b1 c1 d1
) -> reg u32[16]
{

  //k = line(k, a, b, d, 16);
  k[a0] += k[b0];
  k[a1] += k[b1];

  k[d0] ^= k[a0];
  k[d1] ^= k[a1];

  _, _, k[d0] = #ROL_32(k[d0], 16);
  _, _, k[d1] = #ROL_32(k[d1], 16);

  //k = line(k, c, d, b, 12);
  k[c0] += k[d0];
  k[c1] += k[d1];

  k[b0] ^= k[c0];
  k[b1] ^= k[c1];

  _, _, k[b0] = #ROL_32(k[b0], 12);
  _, _, k[b1] = #ROL_32(k[b1], 12);

  //k = line(k, a, b, d, 8);
  k[a0] += k[b0];
  k[a1] += k[b1];

  k[d0] ^= k[a0];
  k[d1] ^= k[a1];

  _, _, k[d0] = #ROL_32(k[d0], 8);
  _, _, k[d1] = #ROL_32(k[d1], 8);

  //k = line(k, c, d, b, 7);
  k[c0] += k[d0];
  k[c1] += k[d1];

  k[b0] ^= k[c0];
  k[b1] ^= k[c1];

  _, _, k[b0] = #ROL_32(k[b0], 7);
  _, _, k[b1] = #ROL_32(k[b1], 7);

  return k;
}


// used;
inline fn __double_round_inline_ref3p(reg u32[16] k, stack u32 k14 k15) -> reg u32[16], stack u32, stack u32
{
  k[14] = k14;

  k = __half_round_inline_ref3p(k, 0, 4, 8, 12,
                                   2, 6, 10, 14);
  k14 = k[14];
  k[15] = k15;

  k = __half_round_inline_ref3p(k, 1, 5, 9, 13,
                                   3, 7, 11, 15);

  k = __half_round_inline_ref3p(k, 1, 6, 11, 12,
                                   0, 5, 10, 15);

  k15 = k[15];
  k[14] = k14;

  k = __half_round_inline_ref3p(k, 2, 7, 8, 13,
                                  3, 4, 9, 14);

  k14 = k[14];

  return k, k14, k15;
}

// used;
inline fn __rounds_inline_ref3p( reg u32[16] k,  stack u32 k15) ->  reg u32[16],  stack u32
{
   stack u32 k14;
   regx u32 s_c;
   reg u32 c;

  k14 = k[14];
  c = (CHACHA_ROUNDS/2);

  while
  { s_c = #MOVX_32(c);

    k, k14, k15 = __double_round_inline_ref3p(k, k14, k15);

    c = #MOVX_32(s_c);
    (_,_,_,_,c) = #DEC_32(c);
  } (c > 0)

  k[14] = k14;
  return k, k15;
}

// used;
inline fn __sum_states_ref3p( reg u32[16] k,  stack u32 k15,  stack u32[16] st) ->  reg u32[16],  stack u32
{
  inline int i;
  stack u32 k14;
  reg u32 t;

  for i=0 to 15
  { k[i] += st[i]; }

  k14 = k[14];

  t = k15;
  t += st[15];
  k15 = t;

  k[14] = k14;

  return k, k15;
}

inline fn __chacha_xor_ref3p( reg u64 output plain len nonce key)
{
   regx u64 s_output s_plain s_len;
   stack u32[16] st;
   reg u32[16] k;  // the full state is in k[0..14] and k15;
   stack u32 k15;
   reg bool b;

  s_output = #MOVX(output);
  s_plain = #MOVX(plain);
  s_len = #MOVX(len);

  st = __init_ref3p(nonce, key);

  while {len = #MOVX(s_len); b = (len >= 64); } (b)
  { k, k15 = __copy_state_ref3p(st);
    k, k15 = __rounds_inline_ref3p(k, k15);
    s_output, s_plain, s_len = __sum_states_store_xor_ref3p(s_output, s_plain, s_len, k, k15, st);
    st = __increment_counter_ref3p(st);
  }

  b = (len > 0);
  if(b)
  { k, k15 = __copy_state_ref3p(st);
    k, k15 = __rounds_inline_ref3p(k, k15);
    k, k15 = __sum_states_ref3p(k, k15, st);
    __store_xor_last_ref3p(s_output, s_plain, s_len, k, k15);
  }
}


inline fn __chacha_ref3p( reg u64 output len nonce key)
{
   regx u64 s_output s_len;
   stack u32[16] st;
   reg u32[16] k;  // the full state is in k[0..14] and k15;
   stack u32 k15;
   reg bool b;

  s_output = #MOVX(output);
  s_len = #MOVX(len);

  st = __init_ref3p(nonce, key);

  while {len = #MOVX(s_len); b = (len >= 64); } (b)
  { k, k15 = __copy_state_ref3p(st);
    k, k15 = __rounds_inline_ref3p(k, k15);
    s_output, s_len = __sum_states_store_ref3p(s_output, s_len, k, k15, st);
    st = __increment_counter_ref3p(st);
  }

  b = (len > 0);
  if(b)
  { k, k15 = __copy_state_ref3p(st);
    k, k15 = __rounds_inline_ref3p(k, k15);
    k, k15 = __sum_states_ref3p(k, k15, st);
    __store_last_ref3p(s_output, s_len, k, k15);
  }
}


export fn jade_stream_chacha_chacha20_amd64_ref3p_xor(#transient reg u64 output plain len nonce key) -> reg u64
{
  reg u64 r;
  #msf reg u64 ms;

  ms = #init_msf();
  __chacha_xor_ref3p(output, plain, len, nonce, key);
  _,_,_,_,_,r = #set0();
  ms = #init_msf();
  return r;
}

export fn jade_stream_chacha_chacha20_amd64_ref3p(#transient reg u64 output len nonce key) -> reg u64
{
  reg u64 r;
  #msf reg u64 ms;

  ms = #init_msf();
  __chacha_ref3p(output, len, nonce, key);
  _,_,_,_,_,r = #set0();
  ms = #init_msf();
  return r;
}