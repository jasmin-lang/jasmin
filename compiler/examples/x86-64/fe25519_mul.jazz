param int crypto_scalarmult_curve25519_amd64_64_38 = 38;
export fn crypto_scalarmult_curve25519_amd64_64_fe25519_mul(reg u64 rp, reg u64 xp, reg u64 ypp){
	 reg bool cf;
	 reg u64 mulc;
	 reg u64 mulr4;
	 reg u64 mulr5;
	 reg u64 mulr6;
	 reg u64 mulr7;
	 reg u64 mulr8;
	 reg u64 mulrax;
	 reg u64 mulrdx;
	 reg u64 mulx0;
	 reg u64 mulx1;
	 reg u64 mulx2;
	 reg u64 mulx3;
	 reg u64 mulzero;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
         reg u64 yp;

	yp = ypp;
	mulr4 = 0;
	mulr5 = 0;
	mulr6 = 0;
	mulr7 = 0;
	mulx0 = [xp + 0*8];
	mulrax = [yp + 0*8];
	mulrdx, mulrax = mulrax * mulx0;
	r0 = mulrax;
	r1 = mulrdx;
	mulrax = [yp + 1*8];
	mulrdx, mulrax = mulrax * mulx0;
	cf, r1 += mulrax;
	r2 = 0;
	_, r2 += mulrdx + cf;
	mulrax = [yp + 2*8];
	mulrdx, mulrax = mulrax * mulx0;
	cf, r2 += mulrax;
	r3 = 0;
	_, r3 += mulrdx + cf;
	mulrax = [yp + 3*8];
	mulrdx, mulrax = mulrax * mulx0;
	cf, r3 += mulrax;
	_, mulr4 += mulrdx + cf;
	mulx1 = [xp + 1*8];
	mulrax = [yp + 0*8];
	mulrdx, mulrax = mulrax * mulx1;
	cf, r1 += mulrax;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 1*8];
	mulrdx, mulrax = mulrax * mulx1;
	cf, r2 += mulrax;
	_, mulrdx += 0 + cf;
	cf, r2 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 2*8];
	mulrdx, mulrax = mulrax * mulx1;
	cf, r3 += mulrax;
	_, mulrdx += 0 + cf;
	cf, r3 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 3*8];
	mulrdx, mulrax = mulrax * mulx1;
	cf, mulr4 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr4 += mulc;
	_, mulr5 += mulrdx + cf;
	mulx2 = [xp + 2*8];
	mulrax = [yp + 0*8];
	mulrdx, mulrax = mulrax * mulx2;
	cf, r2 += mulrax;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 1*8];
	mulrdx, mulrax = mulrax * mulx2;
	cf, r3 += mulrax;
	_, mulrdx += 0 + cf;
	cf, r3 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 2*8];
	mulrdx, mulrax = mulrax * mulx2;
	cf, mulr4 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr4 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 3*8];
	mulrdx, mulrax = mulrax * mulx2;
	cf, mulr5 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr5 += mulc;
	_, mulr6 += mulrdx + cf;
	mulx3 = [xp + 3*8];
	mulrax = [yp + 0*8];
	mulrdx, mulrax = mulrax * mulx3;
	cf, r3 += mulrax;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 1*8];
	mulrdx, mulrax = mulrax * mulx3;
	cf, mulr4 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr4 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 2*8];
	mulrdx, mulrax = mulrax * mulx3;
	cf, mulr5 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr5 += mulc;
	mulc = 0;
	_, mulc += mulrdx + cf;
	mulrax = [yp + 3*8];
	mulrdx, mulrax = mulrax * mulx3;
	cf, mulr6 += mulrax;
	_, mulrdx += 0 + cf;
	cf, mulr6 += mulc;
	_, mulr7 += mulrdx + cf;
	mulrax = mulr4;
	mulrdx, mulrax = mulrax * crypto_scalarmult_curve25519_amd64_64_38;
	mulr4 = mulrax;
	mulrax = mulr5;
	mulr5 = mulrdx;
	mulrdx, mulrax = mulrax * crypto_scalarmult_curve25519_amd64_64_38;
	cf, mulr5 += mulrax;
	mulrax = mulr6;
	mulr6 = 0;
	_, mulr6 += mulrdx + cf;
	mulrdx, mulrax = mulrax * crypto_scalarmult_curve25519_amd64_64_38;
	cf, mulr6 += mulrax;
	mulrax = mulr7;
	mulr7 = 0;
	_, mulr7 += mulrdx + cf;
	mulrdx, mulrax = mulrax * crypto_scalarmult_curve25519_amd64_64_38;
	cf, mulr7 += mulrax;
	mulr8 = 0;
	_, mulr8 += mulrdx + cf;
	cf, r0 += mulr4;
	cf, r1 += mulr5 + cf;
	cf, r2 += mulr6 + cf;
	cf, r3 += mulr7 + cf;
	mulzero = 0;
	_, mulr8 += mulzero + cf;
	mulr8 *= 38;
	cf, r0 += mulr8;
	cf, r1 += mulzero + cf;
	cf, r2 += mulzero + cf;
	cf, r3 += mulzero + cf;
	_, mulzero += mulzero + cf;
	mulzero *= 38;
	r0 += mulzero;
	[rp + 1*8] = r1;
	[rp + 2*8] = r2;
	[rp + 3*8] = r3;
	[rp + 0*8] = r0;
	return;
}


