export
fn f(reg u64 x) -> reg u64 {
reg u64 r, y;
r = 0;
y = 1;
_, y = y * x; // y is forced to RAX
y = r; // r conflicts with y
r = x;
return r; // r is forced to RAX
}

export
fn g(reg u64 x) -> reg u64 {
reg u64 r, one;
reg bool cf;
r = 0;
one = 1;
while (x < 12) {
cf, x += one;
r = one if !cf;
}
return r;
}
