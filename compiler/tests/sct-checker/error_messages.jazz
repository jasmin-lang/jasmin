export fn assign_msf() {
  reg u64 x;
  x = 0;
  x = #protect(x, x);
}

export fn syscall() {
  stack u8[1] t;
  reg u64 x;
  x = #init_msf();
  t = #randombytes(t);
  x = #protect(x, x);
}
export fn update_msf_not_trans() {
  reg u64 x;
  x = #init_msf();
  x = #update_msf(false, x);
}

export fn update_msf_wrong_expr() {
  reg u64 x;
  x = #init_msf();
  if x == 0 {
    x = #update_msf(false, x);
  }
}

export fn update_msf_not_msf() {
  reg u64 x;
  inline int i;
  for i = 0 to 1 {
    x = #init_msf();
  }
  if x == 0 {
    x = #update_msf(x == 0, x);
  }
}

export fn msf_trans() {
  reg u64 x;
  x = #init_msf();
  if (x == 0) {
    x = #protect(x, x);
  }
}

export fn not_known_as_msf() {
  reg u64 x;
  inline int i;
  for i = 0 to 1 {
    x = #init_msf();
  }
  x = #mov_msf(x);
}

export fn msf_in_export(reg u64 p) {
  p = #protect(p, p);
}

fn must_not_be_a_msf_aux(#msf reg u64 p) { p = p;
}

fn should_be_a_msf_aux(#public reg u64 p) {
  p = #protect(p, p);
}
export fn should_be_a_msf(reg u64 p) {
  should_be_a_msf_aux(p);
}

export fn at_least_transient(#public reg u64 p) {
  [p] = 0;
}

#constraints="hello <= public"
export fn unbound_level() -> reg u64 {
  reg u64 r;
  r = 0;
  return r;
}

#constraints="secret <= public"
export fn inconsistent_constraint() {}

#modmsf
export fn bad_modmsf() {}

#nomodmsf
export fn bad_nomodmsf() {
  _ = #init_msf();
}

#nomodmsf
fn another_bad_nomodmsf(reg u64 x) -> reg u64  {
  if (x == 0) {
    x = 2;
  }
  return x;
}
export fn call_bad_nomodmsf(reg u64 x) {
  reg u64 msf;
  msf = #init_msf();
  x = another_bad_nomodmsf(x);
  x = #protect(x, msf);
}

#nomodmsf
fn another_bad_nomodmsf2(reg u64 x, reg u64 msf) -> reg u64 , reg u64 {
  if (x == 0) {
    msf = #update_msf(x == 0, msf);
    x = 2;
  }
  msf = #update_msf(!(x == 0), msf);
  return x, msf;
}
export fn call_bad_nomodmsf2(reg u64 x) {
  reg u64 msf;
  msf = #init_msf();
  x, msf = another_bad_nomodmsf2(x, msf);
  x = #protect(x, msf);
}

#nomodmsf
fn another_bad_nomodmsf3(reg u64 x, reg u64 msf) -> reg u64 , reg u64 {
  reg bool b;
  while{b = x > 0;}(b) {
    msf = #update_msf(b, msf);
    x -= 1;
  }
  msf = #update_msf(!b, msf);
  return x, msf;
}
export fn call_bad_nomodmsf3(reg u64 x) {
  reg u64 msf;
  msf = #init_msf();
  x, msf = another_bad_nomodmsf3(x, msf);
  x = #protect(x, msf);
}

fn modmsf_destroys(reg u64 x) -> reg u64  {
  if (x == 0) {
    x = 2;
  }
  return x;
}
export fn call_modmsf_destroys(reg u64 x) {
  reg u64 msf;
  msf = #init_msf();
  x = modmsf_destroys(x);
  x = #protect(x, msf);
}

export fn ret_high(reg u64 p) -> #public reg u64 {
  _ = #init_msf();
  p = [p];
  return p;
}

export fn ret_transient(#transient reg u64 p) -> #public reg u64 {
  return p;
}

export fn ret_msf() -> #public reg u64 {
  reg u64 msf;
  msf = #init_msf();
  return msf;
}

export fn public_arg(#public reg u32 x) { x = x; }

export fn need_declassify(#transient reg u64 p) -> #public reg u64 {
  reg u64 x msf;
  msf = #init_msf();
  x = [p];                // need #declassify here
  x = #protect(x, msf);
  return x;
}
