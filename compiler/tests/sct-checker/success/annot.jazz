fn f(#transient reg u64 x) -> #secret reg u64 {
  reg u64 r;
  _ = #init_msf();
  r = 0;
  if x > 0 {
    r = 1;
   }
   return r;
}

fn id(#poly = k reg u64 arg) -> #poly = { k } reg u64 {
  _ = #init_msf();
  return arg;
}

fn id1(#poly = k reg u64 arg) -> #poly = { k } reg u64 {
  return arg;
}

fn id2(#[poly = p, poly = v] reg ptr u64[2] arg) -> #[poly = p, poly = v] reg ptr u64[2] {
  return arg;
}

fn id3(#public reg u64 arg) -> #public reg u64 {
  return arg;
}

fn id4(#transient reg u64 arg) -> #transient reg u64 {
  return arg;
}

fn id5(#secret reg u64 arg) -> #secret reg u64 {
  return arg;
}

fn unused_msf(#msf reg u64 msf) {}
