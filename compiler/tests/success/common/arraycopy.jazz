param int N = 4;

u32[N] g = { 1, 2, 3, 4 };

export
fn all_kinds() -> reg u32 {
  inline int i;
  reg u32[N] a b;
  stack u32[N] c d;

  // Global to register
  a = #copy_32(g);
  // Register to register
  b = #copy_32(a);
  // Register to stack
  c = #copy_32(b);
  // Stack to stack
  d = #copy_32(c);
  // Stack to register
  a = #copy_32(d);

  reg u32 x;
  x = 0;
  for i = 0 to N { x += a[i]; }

  reg ptr u32[N] p;
  stack ptr u32[N] q;

  p = c;
  q = p;

  // Register to reg ptr
  p = #copy_32(a);
  // Reg ptr to stack ptr
  q = #copy_32(p);
  // Stack ptr to stack
  d = #copy_32(q);
  // Stack to reg ptr
  p = #copy_32(d);
  // Reg ptr to reg
  a = #copy_32(a);

  for i = 0 to N { x += a[i]; }

  return x;
}

export
fn slices(reg u32 x) -> reg u32 {
  inline int i;
  stack u32[4] p q;
  for i = 0 to 4 { p[i] = x; }
  for i = 0 to 2 {
    q[2 * i:2] = #copy_32(p[2 - 2 * i:2]);
  }
  x = q[1];
  return x;
}

export
fn self_copy(reg u32 x) -> reg u32 {
  inline int i;
  stack u32[3] s;
  s[0] = x;
  for i = 1 to 3 {
    s[i:1] = #copy_32(s[i - 1:1]);
  }
  x = s[2];
  return x;
}

export
fn ptr_slices() -> reg u32 {
  reg u32 x;
  reg ptr u32[2] p;
  stack u32[1] s;
  p = g[1:2];
  s = #copy_32(p[1:1]);
  x = s[0];
  return x;
}
