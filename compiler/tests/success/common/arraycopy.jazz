param int N = 4;

u32[N] g = { 1, 2, 3, 4 };

export
fn all_kinds() -> reg u32 {
  inline int i;
  reg u32[N] a b;
  stack u32[N] c d;

  // Global to register
  a = #copy_32(g);
  // Register to register
  b = #copy_32(a);
  // Register to stack
  c = #copy_32(b);
  // Stack to stack
  d = #copy_32(c);
  // Stack to register
  a = #copy_32(d);

  reg u32 x;
  x = 0;
  for i = 0 to N { x += a[i]; }

  reg ptr u32[N] p;
  stack ptr u32[N] q;

  p = c;
  q = p;

  // Register to reg ptr
  p = #copy_32(a);
  // Reg ptr to stack ptr
  q = #copy_32(p);
  // Stack ptr to stack
  d = #copy_32(q);
  // Stack to reg ptr
  p = #copy_32(d);
  // Reg ptr to reg
  a = #copy_32(a);

  for i = 0 to N { x += a[i]; }

  return x;
}


