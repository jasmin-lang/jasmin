param int N = 10;

fn double (reg ptr u32[N] a) -> reg ptr u32[N] {
  inline int i;
  reg u32 tmp;
  for i = 0 to N {
    tmp = a[i];
    tmp *= 2;
    a[i] = tmp;
  }
  return a;
}

export fn main (reg ptr u32[4*N] a) -> reg ptr u32[4*N] {
  reg u64 i = 0;
  while (i < 4*N) {
    a[i:N] = double(a[i:N]);
    i += N;
  }
  return a;
}

fn double_unaligned (reg ptr u32[N] a) -> reg ptr u32[N] {
  inline int i;
  reg u32 tmp;
  for i = 0 to N {
    tmp = a[#unaligned i];
    tmp *= 2;
    a[#unaligned i] = tmp;
  }
  return a;
}

export fn main_unaligned (reg ptr u32[4*N] a) -> reg ptr u32[4*N] {
  reg u64 i = 0;
  while (i < 4*N) {
    a[i:N] = double_unaligned(a[i:N]);
    i += N;
  }
  return a;
}
