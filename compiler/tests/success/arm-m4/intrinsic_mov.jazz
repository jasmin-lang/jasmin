export
fn mov(reg u32 arg0) -> reg u32 {
    reg u32 x;

    x = arg0;
    [x] = x;

    // Immediates.
    x = #MOV(1);
    [x] = x;
    x = #MOV(0xcacacaca); // `bbbb` pattern.
    [x] = x;
    x = #MOV(0xca00ca00); // `b0b0` pattern.
    [x] = x;
    x = #MOV(0x00ca00ca); // `0b0b` pattern.
    [x] = x;
    x = #MOV(0x0000cb00); // Shifted immediate gets converted into W-encoding.
    [x] = x;
    x = #MOV(0x0000caca); // W-encoding.
    [x] = x;

    // Set flags.
    ?{}, x = #MOVS(x);
    [x] = x;
    ?{}, x = #MOVS(0xcacacaca);
    [x] = x;
    ?{}, x = #MOVS(0xca00ca00);
    [x] = x;
    ?{}, x = #MOVS(0x00ca00ca);
    [x] = x;
    reg bool n, z, v, c;
    n, z, c, v = #CMP(x, 0);

    // Conditions.
    x = #MOVcc(x, z, x);            // EQ
    x = #MOVcc(x, !z, x);           // NE
    x = #MOVcc(x, c, x);            // CS
    x = #MOVcc(x, !c, x);           // CC
    x = #MOVcc(x, n, x);            // MI
    x = #MOVcc(x, !n, x);           // PL
    x = #MOVcc(x, v, x);            // VS
    x = #MOVcc(x, !v, x);           // VC
    x = #MOVcc(x, c && !z, x);      // HI
    x = #MOVcc(x, !c || z, x);      // LS
    x = #MOVcc(x, n == v, x);       // GE
    x = #MOVcc(x, n != v, x);       // LT
    x = #MOVcc(x, !z && n == v, x); // GT
    x = #MOVcc(x, z || n != v, x);  // LE

    x = #MOVcc(1, !z, x);
    n, z, c, x = #MOVScc(arg0, !z, n, z, c, x);
    n, z, c, x = #MOVScc(49, !!z, n, z, c, x);

    reg u32 res;
    res = x;
    return res;
}
