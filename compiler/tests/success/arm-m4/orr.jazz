export
fn orr(reg u32 arg0, reg u32 arg1) -> reg u32 {
    reg u32 x;
    reg bool nf, zf, vf, cf;

    // Registers.
    x = arg0 | arg1;
    [x] = x;

    // Immediates.
    x = arg0 | 1;
    x |= 1;
    [x] = x;
    x = arg0 | -1;
    x |= -1;
    x |= 0xcacacaca; // `bbbb` pattern.
    x |= 0xca00ca00; // `b0b0` pattern.
    x |= 0x00ca00ca; // `0b0b` pattern.
    [x] = x;

    // Shifts.
    x = arg0 | (arg1 << 0);
    x |= arg0 << 0;
    [x] = x;
    x = arg0 | (arg1 << 1);
    x |= arg0 << 1;
    [x] = x;
    x = arg0 | (arg1 << 31);
    x |= arg0 << 31;
    [x] = x;
    x = arg0 | (arg1 >> 1);
    x |= arg0 >> 1;
    [x] = x;
    x = arg0 | (arg1 >> 31);
    x |= arg0 >> 31;
    [x] = x;
    x = arg0 | (arg1 >>s 1);
    x |= arg0 >>s 1;
    [x] = x;
    x = arg0 | (arg1 >>s 31);
    x |= arg0 >>s 31;
    [x] = x;
    x = arg0 | (arg1 >>r 1);
    x |= arg0 >>r 1;
    [x] = x;
    x = arg0 | (arg1 >>r 31);
    x |= arg0 >>r 31;
    [x] = x;

    // Conditionals.
    nf, zf, cf, vf = #CMP(x, 0);

    // EQ
    x = arg0 | arg1 if zf;
    x |= arg0 if zf;
    // NE
    x = arg0 | arg1 if !zf;
    x |= arg0 if !zf;
    // CS
    x = arg0 | arg1 if cf;
    x |= arg0 if cf;
    // CC
    x = arg0 | arg1 if !cf;
    x |= arg0 if !cf;
    // MI
    x = arg0 | arg1 if nf;
    x |= arg0 if nf;
    // PL
    x = arg0 | arg1 if !nf;
    x |= arg0 if !nf;
    // VS
    x = arg0 | arg1 if vf;
    x |= arg0 if vf;
    // VC
    x = arg0 | arg1 if !vf;
    x |= arg0 if !vf;
    // HI
    x = arg0 | arg1 if cf && !zf;
    x |= arg0 if cf && !zf;
    // LS
    x = arg0 | arg1 if !cf || zf;
    x |= arg0 if !cf || zf;
    // GE
    x = arg0 | arg1 if nf == vf;
    x |= arg0 if nf == vf;
    // LT
    x = arg0 | arg1 if nf != vf;
    x |= arg0 if nf != vf;
    // GT
    x = arg0 | arg1 if !zf && nf == vf;
    x |= arg0 if !zf && nf == vf;
    // LE
    x = arg0 | arg1 if zf || nf != vf;
    x |= arg0 if zf || nf != vf;

    // Combinations.
    x |= arg0 if !!!!zf;
    x |= 2 if zf;
    x |= 2 if !!zf;
    x |= arg0 << 3 if zf;
    x |= arg0 << 3 if !(!!zf || !(nf == vf));
    x |= arg0 >> 3 if zf;
    x |= arg0 >>s 3 if zf;
    x |= arg0 >>r 3 if zf;

    reg u32 res;
    res = x;
    return res;
}
