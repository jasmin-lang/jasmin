export
fn adc(reg u32 arg0, reg u32 arg1) -> reg u32 {
    reg u32 x;
    reg bool c;

    _, _, c, _ = #MOVS(arg0);

    x = #ADC(arg0, arg1, c);

    // Immediates.
    x = #ADC(x, 0, c);
    x = #ADC(x, 1, c);
    x = #ADC(x, 255, c);
    x = #ADC(x, 0xcacacaca, c); // `bbbb` pattern.
    x = #ADC(x, 0xca00ca00, c); // `b0b0` pattern.
    x = #ADC(x, 0x00ca00ca, c); // `0b0b` pattern.
    x = #ADC(x, 0x000cb000, c); // Shifted byte.

    // Shifts.
    x = #ADC(x, arg0 << 0, c);
    x = #ADC(x, arg0 << 31, c);
    x = #ADC(x, arg0 >> 1, c);
    x = #ADC(x, arg0 >> 32, c);
    x = #ADC(x, arg0 >>s 1, c);
    x = #ADC(x, arg0 >>s 32, c);
    x = #ADC(x, arg0 >>r 1, c);
    x = #ADC(x, arg0 >>r 31, c);
    // x = #ADC(x, arg0, #RRX(1));

    // Set flags.
    reg bool n, z, v;
    n, z, c, v, x = #ADCS(x, arg0, c);
    n, z, c, v, x = #ADCS(x, 1, c);
    n, z, c, v, x = #ADCS(x, 0xcacacaca, c);
    n, z, c, v, x = #ADCS(x, 0xca00ca00, c);
    n, z, c, v, x = #ADCS(x, 0x00ca00ca, c);
    n, z, c, v, x = #ADCS(x, 0x000cb000, c);
    n, z, c, v, x = #ADCS(x, arg0 << 3, c);

    // Conditions.
    x = #ADCcc(x, arg0, c, z, x);            // EQ
    x = #ADCcc(x, arg0, c, !z, x);           // NE
    x = #ADCcc(x, arg0, c, c, x);            // CS
    x = #ADCcc(x, arg0, c, !c, x);           // CC
    x = #ADCcc(x, arg0, c, n, x);            // MI
    x = #ADCcc(x, arg0, c, !n, x);           // PL
    x = #ADCcc(x, arg0, c, v, x);            // VS
    x = #ADCcc(x, arg0, c, !v, x);           // VC
    x = #ADCcc(x, arg0, c, c && !z, x);      // HI
    x = #ADCcc(x, arg0, c, !c || z, x);      // LS
    x = #ADCcc(x, arg0, c, n == v, x);       // GE
    x = #ADCcc(x, arg0, c, n != v, x);       // LT
    x = #ADCcc(x, arg0, c, !z && n == v, x); // GT
    x = #ADCcc(x, arg0, c, z || n != v, x);  // LE

    x = #ADCcc(x, 1, c, !!!!z, x);
    n, z, c, v, x = #ADCScc(x, arg0, c, n == v, n, z, c, v, x);
    n, z, c, v, x = #ADCScc(x, 2, c, !c || z, n, z, c, v, x);
    x = #ADCcc(x, arg0 << 3, c, z, x);
    n, z, c, v, x = #ADCScc(x, arg0 << 3, c, z, n, z, c, v, x);

    reg bool zf, cf;
    ?{CF = c}, x = #ADCS(x, arg0, c);
    ?{CF = c, ZF = zf}, x = #ADCS(x, arg0, c);
    ?{cf}, x = #ADCS(x, arg0, c);

    reg u32 res;
    res = x;
    return res;
}
