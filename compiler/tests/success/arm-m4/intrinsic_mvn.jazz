export
fn mvn(reg u32 arg0) -> reg u32 {
    reg u32 x;
    reg bool nf, zf, vf, cf;

    // Registers.
    x = #MVN(arg0);
    [x] = x;

    // Immediates.
    x = #MVN(1);
    [x] = x;
    x = #MVN(-1);
    [x] = x;

    // Shifts.
    x = #MVN(arg0, #LSL(0));
    [x] = x;
    x = #MVN(arg0, #LSL(1));
    [x] = x;
    x = #MVN(arg0, #LSL(31));
    [x] = x;
    x = #MVN(arg0, #LSR(1));
    [x] = x;
    x = #MVN(arg0, #LSR(31));
    [x] = x;
    x = #MVN(arg0, #ASR(1));
    [x] = x;
    x = #MVN(arg0, #ASR(31));
    [x] = x;
    x = #MVN(arg0, #ROR(1));
    [x] = x;
    x = #MVN(arg0, #ROR(31));
    [x] = x;

    // Set flags.
    nf, zf, cf, x = #MVNS(arg0);

    // Conditionals.
    nf, zf, cf, vf, _ = #MOVS(x);

    // EQ
    x = #MVNcc(arg0, zf, x);
    // NE
    x = #MVNcc(arg0, !zf, x);
    // CS
    x = #MVNcc(arg0, cf, x);
    // CC
    x = #MVNcc(arg0, !cf, x);
    // MI
    x = #MVNcc(arg0, nf, x);
    // PL
    x = #MVNcc(arg0, !nf, x);
    // VS
    x = #MVNcc(arg0, vf, x);
    // VC
    x = #MVNcc(arg0, !vf, x);
    // HI
    x = #MVNcc(arg0, cf && !zf, x);
    // LS
    x = #MVNcc(arg0, !cf || zf, x);
    // GE
    x = #MVNcc(arg0, nf == vf, x);
    // LT
    x = #MVNcc(arg0, nf != vf, x);
    // GT
    x = #MVNcc(arg0, !zf && nf == vf, x);
    // LE
    x = #MVNcc(arg0, zf || nf != vf, x);

    // Combinations.
    nf, zf, cf, x = #MVNScc(arg0, nf == vf, nf, zf, cf, x);
    nf, zf, cf, x = #MVNS(2);
    nf, zf, cf, x = #MVNS(arg0, #LSL(3));
    nf, zf, cf, x = #MVNS(arg0, #LSR(3));
    nf, zf, cf, x = #MVNS(arg0, #ASR(3));
    nf, zf, cf, x = #MVNS(arg0, #ROR(3));
    nf, zf, cf, x = #MVNScc(2, nf == vf, nf, zf, cf, x);
    nf, zf, cf, x = #MVNScc(arg0, #LSL(3), nf == vf, nf, zf, cf, x);
    nf, zf, cf, x = #MVNScc(arg0, #LSL(3), !!(nf == vf), nf, zf, cf, x);
    nf, zf, cf, x = #MVNScc(arg0, #LSR(3), nf == vf, nf, zf, cf, x);
    nf, zf, cf, x = #MVNScc(arg0, #ASR(3), nf == vf, nf, zf, cf, x);
    nf, zf, cf, x = #MVNScc(arg0, #ROR(3), nf == vf, nf, zf, cf, x);
    x = #MVNcc(arg0, !!!!zf, x);
    x = #MVNcc(2, zf, x);
    x = #MVNcc(2, !!zf, x);
    x = #MVNcc(arg0, #LSL(3), zf, x);
    x = #MVNcc(arg0, #LSL(3), !!zf, x);
    x = #MVNcc(arg0, #LSR(3), zf, x);
    x = #MVNcc(arg0, #ASR(3), zf, x);
    x = #MVNcc(arg0, #ROR(3), zf, x);

    reg u32 res;
    res = x;
    return res;
}
