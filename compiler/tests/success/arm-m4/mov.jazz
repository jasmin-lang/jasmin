export
fn mov(reg u32 arg0) -> reg u32 {
    reg u32 x;

    x = arg0;
    [x] = x;

    // Immediates.
    x = 0xcacacaca; // `bbbb` pattern.
    [x] = x;
    x = 0xca00ca00; // `b0b0` pattern.
    [x] = x;
    x = 0x00ca00ca; // `0b0b` pattern.
    [x] = x;
    x = 0x0000cb00; // Shifted immediate gets converted into W-encoding.
    [x] = x;
    x = 0x0000caca; // W-encoding.
    [x] = x;

    // Set flags.
    reg bool n, z, v, c;
    n, z, c, v = #CMP(x, 0);

    // Conditions.
    x = arg0 if z;            // EQ
    x = arg0 if !z;           // NE
    x = arg0 if c;            // CS
    x = arg0 if !c;           // CC
    x = arg0 if n;            // MI
    x = arg0 if !n;           // PL
    x = arg0 if v;            // VS
    x = arg0 if !v;           // VC
    x = arg0 if c && !z;      // HI
    x = arg0 if !c || z;      // LS
    x = arg0 if n == v;       // GE
    x = arg0 if n != v;       // LT
    x = arg0 if !z && n == v; // GT
    x = arg0 if z || n != v;  // LE

    x = 1 if c;
    x = 0xcacacaca if c;
    x = 0xca00ca00 if c;
    x = 0x00ca00ca if c;
    x = 0x0000cb00 if c;
    x = 0x0000caca if c;

    reg u32 res;
    res = x;
    return res;
}
