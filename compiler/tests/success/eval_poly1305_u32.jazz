inline
fn add(stack u32[17] h, stack u32[17] c) -> stack u32[17] {
  inline int j;
  reg u32 u, tmp;
  u = 0;
  for j = 0 to 17 {
    u += h[j];
    u += c[j];
    tmp = u; tmp &= 255; h[j] = tmp;
    u >>= 8;
  }

  return h;
}

inline
fn add_minusp(stack u32[17] h) -> stack u32[17] {
  inline int j;
  reg u32 u, tmp;
  u = 0;
  for j = 0 to 17 {
    u += h[j];
    if j == 0 { u += 5; }
    if j == 16 { u += 252; }
    tmp = u; tmp &= 255; h[j] = tmp;
    u >>= 8;
  }

  return h;
}

inline
fn add_and_store(reg u64 out, stack u32[17] h, stack u32[17] c) {
  inline int j;
  reg u32 u, tmp;
  u = 0;
  for j = 0 to 16 {
    u += h[j];
    u += c[j];
    tmp = u; tmp &= 255; (u8)[out + j] = tmp;
    u >>= 8;
  }
}

inline
fn freeze(stack u32[17] h) -> stack u32[17] {
  inline int j;
  reg u32 tmp, negative;
  stack u32[17] horig;

  for j = 0 to 17 { tmp = h[j]; horig[j] = tmp; }
  h = add_minusp(h);
  negative = h[16];
  negative >>= 7;
  negative = -negative;
  for j = 0 to 17 {
    tmp = horig[j];
    tmp ^= h[j];
    tmp &= negative;
    h[j] ^= tmp;
  }
  return h;
}

inline
fn squeeze(stack u32[17] h) -> stack u32[17] {
  inline int j;
  reg u32 u, tmp;
  u = 0;
  for j = 0 to 16 {
    u += h[j];
    tmp = u; tmp &= 255; h[j] = tmp;
    u >>= 8;
  }

  u += h[16];
  tmp = u; tmp &= 3; h[16] = tmp;

  u >>= 2; u *= 5;

  for j = 0 to 16 {
    u += h[j];
    tmp = u; tmp &= 255; h[j] = tmp;
    u >>= 8;
  }

  u += h[16];
  h[16] = u;

  return h;
}

inline
fn mulmod(stack u32[17] h, stack u32[17] r) -> stack u32[17] {
  stack u32[17] hr;
  reg u32 tmp, u;
  inline int i, j;

  for i = 0 to 17 {
    u = 0;
    for j = 0 to i + 1 {
      tmp = h[j];
      tmp *= r[i - j];
      u += tmp;
    }
    for j = i + 1 to 17 {
      tmp = 320;
      tmp *= h[j];
      tmp *= r[i + 17 - j];
      u += tmp;
    }
    hr[i] = u;
  }

  for i = 0 to 17 { tmp = hr[i]; h[i] = tmp; }
  h = squeeze(h);

  return h;
}

export
fn poly1305(reg u64 out, reg u64 in, reg u64 inlen, reg u64 k) -> reg u64 {
  inline int i;
  reg u8 tmp;
  reg u32 tmp32, one;
  reg u64 ret;
  stack u32[17] r, h, c;

  for i = 0 to 16 {
    tmp = (u8)[k + i];
    if i % 4 == 3 { tmp &= 15; }
    if i == 4 || i == 8 || i == 12 { tmp &= 252; }
    tmp32 = (32u) tmp;
    r[i] = tmp32;
  }
  r[16] = 0;

  for i = 0 to 17 { h[i] = 0; }

  one = 1;
  while (inlen > 0) {
    if inlen >= 16 {
      for i = 0 to 16 {
        tmp = (u8)[in + i];
        tmp32 = (32u) tmp;
        c[i] = tmp32;
      }
      c[16] = one;

      in += 16;
      inlen -= 16;

    } else {
      reg bool eq gt;
      for i = 0 to 17 {
        ?{}, tmp32 = #set0_32();
        ?{ "==" = eq, ">s" = gt} = #CMP(inlen, i);
        if gt { // inlen > i
          tmp = (u8)[in + i];
          tmp32 = (32u) tmp;
        }
        tmp32 = one if eq; // inlen == i
        c[i] = tmp32;
      }
      ?{}, inlen = #set0();
    }

    h = add(h, c);
    h = mulmod(h, r);
  }

  h = freeze(h);

  for i = 0 to 16 {
    tmp = (u8)[k + i + 16];
    tmp32 = (32u) tmp;
    c[i] = tmp32;
  }

  c[16] = 0;
  add_and_store(out, h, c);

  ?{}, ret = #set0();
  return ret;
}

u256 key = 0x1bf54941aff6bf4afdb20dfb8a800301a806d542fe52447f336d555778bed685;

inline
fn test_poly1305() -> reg u8[16] {
reg u64 in, out, inlen, k, tmp;
reg u8[16] result;
inline int i;

out = 0x1200;
k = 0x1100;
in = 0x1000;

(u256)[k + 0] = key;

(u8)[in + 0] = 0x43;
(u8)[in + 1] = 0x72;
(u8)[in + 2] = 0x79;
(u8)[in + 3] = 0x70;
(u8)[in + 4] = 0x74;
(u8)[in + 5] = 0x6f;
(u8)[in + 6] = 0x67;
(u8)[in + 7] = 0x72;
(u8)[in + 8] = 0x61;
(u8)[in + 9] = 0x70;
(u8)[in + 10] = 0x68;
(u8)[in + 11] = 0x69;
(u8)[in + 12] = 0x63;
(u8)[in + 13] = 0x20;
(u8)[in + 14] = 0x46;
(u8)[in + 15] = 0x6f;
(u8)[in + 16] = 0x72;
(u8)[in + 17] = 0x75;
(u8)[in + 18] = 0x6d;
(u8)[in + 19] = 0x20;
(u8)[in + 20] = 0x52;
(u8)[in + 21] = 0x65;
(u8)[in + 22] = 0x73;
(u8)[in + 23] = 0x65;
(u8)[in + 24] = 0x61;
(u8)[in + 25] = 0x72;
(u8)[in + 26] = 0x63;
(u8)[in + 27] = 0x68;
(u8)[in + 28] = 0x20;
(u8)[in + 29] = 0x47;
(u8)[in + 30] = 0x72;
(u8)[in + 31] = 0x6f;
(u8)[in + 32] = 0x75;
(u8)[in + 33] = 0x70;

inlen = 34;

#inline tmp = poly1305(out, in, inlen, k);

for i = 0 to 16 {
  result[i] = (u8)[out + i];
}

return result;
}

exec test_poly1305
( 0x1200:16 /* out */
, 0x1100:32 /* k */
, 0x1000:34 /* in */
)
