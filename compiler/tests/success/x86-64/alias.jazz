export
fn test(reg u64 x) -> reg u64 {
reg u64 result;
stack u64[10] bigA bigB;
stack u64[5] leftA rightA;

bigA[0] = x;

leftA = bigA[0:5];
rightA = bigA[5:5];

if x > 0 {
bigB[0] = x;
} else {
bigB[0:5] = leftA;
}

result = bigB[0];
return result;
}

fn toto (reg ptr u64[1] p, reg u64 x) -> reg ptr u64[1] {

stack ptr u64[1] a;

a = p;
p = a;

p[0] = x;

return p;
}

/* TODO this should be move in Fail 

u64[2] g = {0, 1};

inline fn merge (stack u64[2] g1) -> stack u64[2] {
  return g1;
}

fn titi() -> reg u64 {
   stack u64[2] s;
   reg u64 r;
   s = merge(g);
   s[1] = 1;
   r = s[1];
   return r;
}  

*/

/*
u64 g1 = 0;

inline fn merge1 (stack u64 g2) -> stack u64 {
  return g2;
}

fn titi1() -> reg u64 {
   stack u64 s;
   reg u64 r;
   s = merge1(g1);
   r = s;
   return r;
}  
*/
