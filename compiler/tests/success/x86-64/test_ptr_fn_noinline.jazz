fn init (reg ptr u64[3] p) -> reg ptr u64[3]  {
   inline int i;
   for i = 0 to 3 {
      p[i] = 0;
   }
  return p; 
}

fn set (reg ptr u64[3] p) -> reg ptr u64[3], reg u64 {
   reg u64 r;
   p[0] = 1;
   r = p[1];
   return (p,r);
}


// u64[3] g = {0,1,2};
/*
export fn test () {
  reg ptr u64[3] ps;
  ps = g;
  ps = init(ps);
}
*/
/* fn foo1() -> reg u64 {
  stack u64[3] s;
  reg ptr u64[3] ps;
  reg u64 r;
  inline int i;
  ps = s;
  ps = init(ps);  
  s = ps;
  r = 0;
  for i = 0 to 3 {
   r += s[i];
  }
  return r;
}

export fn foo2() -> reg u64 {
  stack u64[3] s;
  reg ptr u64[3] ps;
  reg u64 r;
  inline int i;
  ps = s;
  ps = init(ps);  
 
  r = 0;
  for i = 0 to 3 {
   r += ps[i];
  }
  return r;
}

export fn foo3() -> reg u64 {
  stack u64[3] s;
  reg ptr u64[3] ps;
  reg u64 r;
  inline int i;
  ps = init(s);  
 
  r = 0;
  for i = 0 to 3 {
   r += ps[i];
  }
  return r;
}
*/
/*
export fn foo4() -> reg u64 {
  stack u64[3] s;
  reg u64 r;
  inline int i;
  s = init(s);  
 
  r = 0;
  for i = 0 to 3 {
   r += s[i];
  }
  return r;
}
*/

export fn foo5() -> reg u64 {
  stack u64[3] s;
  reg u64 r;
  inline int i;
  s = init(s);  
  s,r = set(s);
  r += s[0];
  return r;
}


